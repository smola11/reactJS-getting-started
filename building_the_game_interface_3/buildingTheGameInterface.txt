// React JS
const Stars = (props) => {
  const numberOfStars = 1 + Math.floor(Math.random() * 9);
  // instead this loop we use lowdash _.range
  // let stars = [];
  // for (let i=0; i<numberOfStars; i++){
  // 	stars.push(<i key={i} className="fa fa-star"></i>)
  // }
  return (
    <div className="col-5">
    	{_.range(numberOfStars).map(i =>
      <i key={i} className="fa fa-star"></i>
    )}
    </div>
  );
};

const Button = (props) => {
  return (
    <div className="col-2">
      <button>=</button>
    </div>
  );
};

const Answer = (props) => {
  return (
    <div className="col-5">
      <span>5</span>
      <span>6</span>
    </div>
  );
};

const Numbers = (props) => {
  // we are using here lowdash library
  const arrayOfNumbers = _.range(1, 10);
  return (
    <div className="card text-center">
    <div>
      {Numbers.list.map((number, i) =>
      <span key={i}>{number}</span>
    )}
    </div>
    </div>
  );
};

// Every function is an object so we can store data on that object to be used by all instances of that object. This list will be shared with the all instances of the Numbers component and it will be the same.
Numbers.list = _.range(1, 10);

class Game extends React.Component {
  render() {
    return (
      <div className="container">
       <h3>Play Nine</h3>
       <div className="row">
       	<Stars />
       	<Button />
       	<Answer />
      </div>
       <br />
       <Numbers />
      </div>
    );
  }
}

class App extends React.Component {

  render() {
    return (
      <div>
        <Game />
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);

// CSS global stylesheet
.mountNode {
  color: #333;
}

.fa-star {
  margin: 0.5em;
  font-size: 24px;
}

span {
  display: inline-block;
  margin: 0.5em;
  text-align: center;
  background-color: #ccc;
  width: 24px;
  border-radius: 50%;
  cursor: pointer;
}

.selected {
  background-color: #eee;
  color: #ddd;
  cursor: not-allowed;
}

.used {
  background-color: #aaddaa;
  color: #99bb99;
}

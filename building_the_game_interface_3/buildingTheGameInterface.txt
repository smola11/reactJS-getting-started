// React JS
const Stars = (props) => {
  return (
    <div className="col-5">
    	{_.range(props.numberOfStars).map(i =>
      <i key={i} className="fa fa-star"></i>
    )}
    </div>
  );
};

const Button = (props) => {
  let button;
  switch (props.answerIsCorrect) {
    case true:
      button = <button className="btn btn-success" onClick={props.acceptAnswer}> <i className="fa fa-check"></i> </button>
      break;
    case false:
      button = <button className="btn btn-danger"> <i className="fa fa-times"></i> </button>
      break;
    default:
      button = <button className="btn"
        onClick={props.checkAnswer}
        disabled={props.selectedNumbers.length === 0}> = </button>
      break;
  }
  return (
    <div className="col-2">
     {button}
     <button>
     	<i className="fa fa-refresh"></i>
     </button>
    </div>
  );
};

const Answer = (props) => {
  return (
    <div className="col-5">
     {props.selectedNumbers.map((number, i) =>
      <span key={i} onClick={() => props.unselectNumber(number)}>{number}</span>
    )}
    </div>
  );
};

const Numbers = (props) => {
  const numberClassName = (number) => {
    if (props.usedNumbers.indexOf(number) >= 0) {
      return 'used';
    }
    if (props.selectedNumbers.indexOf(number) >= 0) {
      return 'selected';
    }
  };
  // 'onClick' needs function reference not a function call. This is why we used arrow function
  return (
    <div className="card text-center">
    <div>
      {Numbers.list.map((number, i) =>
      <span key={i} className={numberClassName(number)}
        onClick={() => props.selectNumber(number)}>
          {number}
        </span>
    )}
    </div>
    </div>
  );
};

// Every function is an object so we can store data on that object to be used by all instances of that object. This list will be shared with the all instances of the Numbers component and it will be the same.
Numbers.list = _.range(1, 10);

class Game extends React.Component {
  // Numbers and Answer will be re-rendered so we place the state in Game having both of these components
  state = {
    selectedNumbers: [],
    randomNumberOfStars: 1 + Math.floor(Math.random() * 9),
    usedNumbers: [],
    answerIsCorrect: null,
  };
  selectNumber = (clickedNumber) => {
    if (this.state.selectedNumbers.indexOf(clickedNumber) >= 0) {
      return
    }
    this.setState(prevState => ({
      answerIsCorrect: null,
      selectedNumbers: prevState.selectedNumbers.concat(clickedNumber)
    }));
  };
  unselectNumber = (clickedNumber) => {
    this.setState(prevState => ({
      answerIsCorrect: null,
      selectedNumbers: prevState.selectedNumbers.filter(number => number !== clickedNumber)
    }));
  };
  checkAnswer = () => {
    this.setState(prevState => ({
      answerIsCorrect: prevState.randomNumberOfStars === prevState.selectedNumbers.reduce((acc, n) => acc + n, 0)
    }));
  };
  acceptAnswer = () => {
    this.setState(prevState => ({
      usedNumbers: prevState.usedNumbers.concat(prevState.selectedNumbers),
      selectedNumbers: [],
      answerIsCorrect: null,
      randomNumberOfStars: 1 + Math.floor(Math.random() * 9),
    }));
  };
  render() {
    const {
      selectedNumbers, randomNumberOfStars, answerIsCorrect, usedNumbers
    } = this.state;
    // parent needs to pass its state into child component as a property to make the child able to use it
    return (
      <div className="container">
       <h3>Play Nine</h3>
       <div className="row">
       	<Stars numberOfStars={randomNumberOfStars} />
       	<Button selectedNumbers={selectedNumbers}
        checkAnswer={this.checkAnswer}
        acceptAnswer={this.acceptAnswer}
        answerIsCorrect={answerIsCorrect} />
       	<Answer selectedNumbers={selectedNumbers}
        unselectNumber={this.unselectNumber} />
      </div>
       <br />
       <Numbers selectedNumbers={selectedNumbers}
        selectNumber={this.selectNumber} usedNumbers={usedNumbers} />
      </div>
    );
  }
}

class App extends React.Component {
  render() {
    return (
      <div>
        <Game />
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);

// CSS global stylesheet
.mountNode {
  color: #333;
}

.fa-star {
  margin: 0.5em;
  font-size: 24px;
}

span {
  display: inline-block;
  margin: 0.5em;
  text-align: center;
  background-color: #ccc;
  width: 24px;
  border-radius: 50%;
  cursor: pointer;
}

.selected {
  background-color: #eee;
  color: #ddd;
  cursor: not-allowed;
}

.used {
  background-color: #aaddaa;
  color: #99bb99;
}
